"use strict";(self.webpackChunkunity_tsif_documentation=self.webpackChunkunity_tsif_documentation||[]).push([[387],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),f=r,m=d["".concat(s,".").concat(f)]||d[f]||c[f]||o;return t?i.createElement(m,a(a({ref:n},u),{},{components:t})):i.createElement(m,a({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4887:(e,n,t)=>{t.d(n,{AA:()=>a,V3:()=>l,qh:()=>o});t(7462),t(7294);var i=t(3905);function r(e,n,t,r){return(0,i.kt)("div",{style:{backgroundColor:r,color:t,border:"1px "+t+" solid",borderRadius:"5px",padding:".1rem .4rem"}},n)}const o=e=>{let{children:n}=e;return r(0,"Released","#afa","#181")},a=e=>{let{children:n}=e;return r(0,"In Progress","#ffa","#882")},l=e=>{let{children:n}=e;return r(0,"Planned","#aff","#288")}},9058:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=t(7462),r=(t(7294),t(3905));t(4887);const o={sidebar_position:6,title:"Upload File"},a=void 0,l={unversionedId:"ipfs-functions/upload-file",id:"version-1.0.0/ipfs-functions/upload-file",title:"Upload File",description:"Upload File Function (Task)",source:"@site/versioned_docs/version-1.0.0/ipfs-functions/upload-file.mdx",sourceDirName:"ipfs-functions",slug:"/ipfs-functions/upload-file",permalink:"/Unity-TSIF-Documentation/docs/ipfs-functions/upload-file",draft:!1,editUrl:"https://github.com/3StudioOnline/Unity-TSIF-Documentation/edit/master/versioned_docs/version-1.0.0/ipfs-functions/upload-file.mdx",tags:[],version:"1.0.0",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Upload File"},sidebar:"tutorialSidebar",previous:{title:"Upload Data",permalink:"/Unity-TSIF-Documentation/docs/ipfs-functions/upload-data"},next:{title:"FAQ",permalink:"/Unity-TSIF-Documentation/docs/faq"}},s={},p=[{value:"Upload File Function (Task)",id:"upload-file-function-task",level:2},{value:"Upload File Function (Delegate)",id:"upload-file-function-delegate",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"upload-file-function-task"},"Upload File Function (Task)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"Task<> IPFS.IpfsFunctionLibrary.UploadFile(\n    IpfsPinningServiceConfig ipfsPinningServiceConfig,\n    string bearerToken,\n    string fileToUpload,\n    string saveAs)\n")),(0,r.kt)("p",null,"This function uploads a local file to the ",(0,r.kt)("em",{parentName:"p"},"IPFS")," network. This function requires inputs as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ipfsPinningServiceConfig"),": Holds the URL and name of the pinning service to send the request to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bearerToken"),": The API token for authentication."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fileToUpload"),": The path of the file to upload."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saveAs"),": Optional alternate filename for the uploaded file on IPFS. If left empty, the original filename will be used.")),(0,r.kt)("p",null,"The returned ",(0,r.kt)("em",{parentName:"p"},"Response")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Task")," that holds data such as headers, status code, and body of the response of the HTTP\nrequest."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"Task<(bool success, string errorMessage, HttpResponse response, string cid)>\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"success")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," that only means the upload to the ",(0,r.kt)("em",{parentName:"p"},"IPFS")," network was successful.")),(0,r.kt)("p",null,"If successful, returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"cid")," of the uploaded file in ",(0,r.kt)("em",{parentName:"p"},"string")," format."),(0,r.kt)("h2",{id:"upload-file-function-delegate"},"Upload File Function (Delegate)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"void IPFS.IpfsFunctionLibrary.UploadFile(\n    IpfsPinningServiceConfig ipfsPinningServiceConfig,\n    string bearerToken,\n    string fileToUpload,\n    string saveAs,\n    IpfsUploadFileDelegate responseDelegate)\n")),(0,r.kt)("p",null,"This is a wrapper function for the async implementation. It exists to provide\nthe same functionality but using a delegate for handling responses."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"delegate void IpfsUploadFileDelegate(\n    bool success,\n    string errorMessage,\n    HttpResponse response,\n    string cid)\n")))}c.isMDXComponent=!0}}]);