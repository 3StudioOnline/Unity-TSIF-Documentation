"use strict";(self.webpackChunkunity_tsif_documentation=self.webpackChunkunity_tsif_documentation||[]).push([[691],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),f=r,m=c["".concat(l,".").concat(f)]||c[f]||u[f]||o;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4887:(e,t,n)=>{n.d(t,{AA:()=>i,V3:()=>s,qh:()=>o});n(7462),n(7294);var a=n(3905);function r(e,t,n,r){return(0,a.kt)("div",{style:{backgroundColor:r,color:n,border:"1px "+n+" solid",borderRadius:"5px",padding:".1rem .4rem"}},t)}const o=e=>{let{children:t}=e;return r(0,"Released","#afa","#181")},i=e=>{let{children:t}=e;return r(0,"In Progress","#ffa","#882")},s=e=>{let{children:t}=e;return r(0,"Planned","#aff","#288")}},5038:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));n(4887);const o={sidebar_position:5,title:"Upload Data"},i=void 0,s={unversionedId:"ipfs-functions/upload-data",id:"version-1.0.0/ipfs-functions/upload-data",title:"Upload Data",description:"Upload Data Function (Task)",source:"@site/versioned_docs/version-1.0.0/ipfs-functions/upload-data.mdx",sourceDirName:"ipfs-functions",slug:"/ipfs-functions/upload-data",permalink:"/Unity-TSIF-Documentation/docs/ipfs-functions/upload-data",draft:!1,editUrl:"https://github.com/3StudioOnline/Unity-TSIF-Documentation/edit/master/versioned_docs/version-1.0.0/ipfs-functions/upload-data.mdx",tags:[],version:"1.0.0",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Upload Data"},sidebar:"tutorialSidebar",previous:{title:"Download File",permalink:"/Unity-TSIF-Documentation/docs/ipfs-functions/download-file"},next:{title:"Upload File",permalink:"/Unity-TSIF-Documentation/docs/ipfs-functions/upload-file"}},l={},p=[{value:"Upload Data Function (Task)",id:"upload-data-function-task",level:2},{value:"Upload Data Function (Delegate)",id:"upload-data-function-delegate",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"upload-data-function-task"},"Upload Data Function (Task)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"Task<> IPFS.IpfsFunctionLibrary.UploadData(\n    IpfsPinningServiceConfig ipfsPinningServiceConfig,\n    string bearerToken,\n    string dataToUpload,\n    string saveAs)\n")),(0,r.kt)("p",null,"This function uploads data to the ",(0,r.kt)("em",{parentName:"p"},"IPFS")," network. This function requires inputs as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ipfsPinningServiceConfig"),": Holds the URL and name of the pinning service to send the request to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bearerToken"),": The API token for authentication."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataToUpload"),": The path of the file to upload."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"saveAs"),": Optional alternate filename for the uploaded file on IPFS.")),(0,r.kt)("p",null,"The returned ",(0,r.kt)("em",{parentName:"p"},"Response")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Task")," that holds data such as headers, status code, and body of the response of the HTTP\nrequest."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"Task<(bool success, string errorMessage, HttpResponse response, string cid)>\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"success")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," that only means the upload to the ",(0,r.kt)("em",{parentName:"p"},"IPFS")," network was successful.")),(0,r.kt)("p",null,"If successful, returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"cid")," of the uploaded data in ",(0,r.kt)("em",{parentName:"p"},"string")," format."),(0,r.kt)("h2",{id:"upload-data-function-delegate"},"Upload Data Function (Delegate)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"void IPFS.IpfsFunctionLibrary.UploadData(\n    IpfsPinningServiceConfig ipfsPinningServiceConfig,\n    string bearerToken,\n    string dataToUpload,\n    string saveAs,\n    IpfsUploadDataDelegate responseDelegate)\n")),(0,r.kt)("p",null,"This is a wrapper function for the async implementation. It exists to provide\nthe same functionality but using a delegate for handling responses."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"delegate void IpfsUploadDataDelegate(\n    bool success,\n    string errorMessage,\n    HttpResponse response,\n    string cid)\n")))}u.isMDXComponent=!0}}]);